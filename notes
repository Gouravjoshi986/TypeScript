typescript is a superset of javascript. it is basically javascript with added type security.
# typescript never runs we just write typescript and it compiles to javascript only if the type written everywhere is correct. 
# if any error occurs during compilation , it indicates that the code is not written correctly and a mistake has been made. 
# js is loosely typed but ts is strictly typed

steps to use typescript.   
npm install -g typescript 
create a directory for your project where you want to use typescript 
npm init -y    -- creates a package.json file 
npx tsc --init    --creates a tsconfig.json file    --this file contains configurations of how your ts file will get converted into a js file

// The command to generate a js file from ts file is   tsc -b

// The tsconfig file has many configurations some of them are: 
1. target -> it is the js version in which your typescript is compiled into. 
// older versions for browsers who dont support the new ecmascript versions 
2. rootDir -> it is the directory where the ts compiler will look for the ts files to compile them into js files       // genrally called src
3. outDir -> it is the directory in which the compiled js files will reside // genrally called dist   
// This dist folder is used in gitignore and you never push this dist folder to git/clients. 
// only the type script files are pushed and used 
4. noImplicitAny -> used when you want a little lineant type checking (just allowing implicit/any type in arguments).
5. removeComments -> it removes comments of the ts file when converting to a js file. 

# Interface 
when you want to give type to an object you can define an interface using 
Interface User{
    name:string;
    age:number:
}

// Implementing interfaces = you can also implement one interface via a class while making constructor 
// It is mostly done when you have functions in a interface 
interface Person{
    name:string;
    age:number:
    greet(phrase:string):void;
}
class Employee implements Person{
    name:string;           // defining these quantities here again is important as 
    age:number;            // are being used in the constructor

    constructor(n:string,a:number){
        this.name = n;
        this.age = a;
    }
    greet(phrase:string):void{                   
        console.log(`${phrase} ${this.name})
    }
}

# Types
 similar to interface but they provide some extra functions
 created like interface but with an assignment operator 
 type User = {
    name:string;
    age:number;
 }

 // these cant be used to implement classes and are typically used when interfaces are not enough for a task 

 # > Union   = This is used when you want to define two types for a quantity (eg. number or(|) string)
 # > Intersection  = This is used when you want to define something with every property of two types (eg. type employee = human and(&) worker)


// Arrays can be defined in ts using [].  (eg. :number[] :string[])

// Enums (enumeration) can be defined in ts for set of named constants
defined as: enum Direction{
                up,         // but in reality this will be 0 as there is no meaning of up
                down,       // 1
                left,       // 2
                right       // 3
            }
# It is a virtual concept and not a keyword
# You can also change this while declaring to your needs. 
// eg. up=1 or up="UP"    
// they can be used just like number or string types (eg. :Direction)
// Common use case in express is for status codes  success = 200  not found = 404 etc

# Generics 
// It is an type independent concept.   
// it can tackle the problem of typescript not recognizing the return type correctly when a set of mixed inputs are passed onto it or when a set can be passed ( either string or number )
but what will be passed is not fixed breforehand. 
<T> is used for generics as type. 

# Import and export can be done via import and export statements

# Pick
Pick allows you to create a new type by selecting a set of properties (Keys) from an existing type (Type).
syntax : type UserProfile = Pick<User, 'name' | 'email'>;

# Partial
Partial makes all properties of a type optional, creating a type with the same properties, but each marked as optional.
// Marked by ? sign in front of the parameter

You can either create it like User {
    name?:string,         ->name is optional 
    email:string     
}
or use Partial<User> -> to make both optional 

# Readonly 
When you have a configuration object that should not be altered after initialization, making it Readonly ensures its properties cannot be changed.
interface Config 


